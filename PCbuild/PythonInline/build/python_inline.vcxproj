<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|ARM">
      <Configuration>Debug</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|ARM64">
      <Configuration>Debug</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="PGInstrument|ARM">
      <Configuration>PGInstrument</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="PGInstrument|Win32">
      <Configuration>PGInstrument</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="PGInstrument|x64">
      <Configuration>PGInstrument</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="PGInstrument|ARM64">
      <Configuration>PGInstrument</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="PGUpdate|ARM">
      <Configuration>PGUpdate</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="PGUpdate|Win32">
      <Configuration>PGUpdate</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="PGUpdate|x64">
      <Configuration>PGUpdate</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="PGUpdate|ARM64">
      <Configuration>PGUpdate</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM">
      <Configuration>Release</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM64">
      <Configuration>Release</Configuration>
      <Platform>ARM64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{8B9140D3-1BB2-4C8F-9A23-1D87BC5BF2E8}</ProjectGuid>
  </PropertyGroup>
  <Import Project="..\..\python.props" />
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Label="Configuration">
    <TargetName>python_inline</TargetName>
    <ConfigurationType>Application</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>MultiByte</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>
    <OutDir>$(BuildPath)</OutDir>
    <IntDir>$(BuildPath)python_inline\</IntDir>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <ClCompile>
      <PreprocessorDefinitions>Py_BUILD_CORE;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>$(PySourcePath)Include;$(PySourcePath)PC;..\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <WarningLevel>Level3</WarningLevel>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeLibrary Condition="'$(Configuration)' == 'Debug'">MultiThreadedDebugDLL</RuntimeLibrary>
      <Optimization>MaxSpeed</Optimization>
      <Optimization Condition="'$(Configuration)' == 'Debug'">Disabled</Optimization>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <AdditionalDependencies>shlwapi.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <StackReserveSize>2000000</StackReserveSize>
      <StackReserveSize Condition="$(Configuration) == 'Debug'">12000000</StackReserveSize>
      <StackReserveSize Condition="$(Configuration) == 'PGInstrument'">12000000</StackReserveSize>
      <!-- HACK: Need additional memory to avoid crashing until gh-113655 is fixed -->
      <StackReserveSize Condition="$(Configuration) == 'PGUpdate' and $(UseExtraStackReserve) == 'true'">3000000</StackReserveSize>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <None Include="..\packaging\msix\Assets\python.ico" />
  </ItemGroup>
  <!--
  <ItemGroup>
    <ResourceCompile Include="..\..\PC\python_inline.rc" />
  </ItemGroup>
  -->
  <ItemGroup>
    <ClInclude Include="..\src\python_inline_config.h" />
    <ClInclude Include="..\src\python_inline_args.h" />
    <ClInclude Include="..\src\python_inline_executor.h" />
    <ClInclude Include="..\src\python_inline_platform.h" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="..\src\python_inline.c" />
    <ClCompile Include="..\src\python_inline_config.c" />
    <ClCompile Include="..\src\python_inline_args.c" />
    <ClCompile Include="..\src\python_inline_executor.c" />
    <ClCompile Include="..\src\python_inline_platform.c" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\pythoncore.vcxproj">
      <Project>{cf7ac3d1-e2df-41d2-bea6-1e2556cdea26}</Project>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
    <Import Project="..\..\regen.targets" />
  </ImportGroup>
  
  <!-- Package Installation Target - Run before build -->
  <Target Name="InstallExternalPackages" BeforeTargets="Build" Condition="Exists('..\packaging\requirements.txt')">
    <Message Text="Installing external Python packages from requirements.txt..." Importance="high" />
    <PropertyGroup>
      <PackageInstallScript>..\packaging\Install-Packages.ps1</PackageInstallScript>
      <RequirementsFile>..\packaging\requirements.txt</RequirementsFile>
      <SitePackagesPath>..\packaging\site-packages</SitePackagesPath>
    </PropertyGroup>
    
    <!-- Check if packages are already installed -->
    <PropertyGroup>
      <PackagesInstalled Condition="Exists('$(SitePackagesPath)\python_inline_packages.txt')">true</PackagesInstalled>
      <PackagesInstalled Condition="!Exists('$(SitePackagesPath)\python_inline_packages.txt')">false</PackagesInstalled>
    </PropertyGroup>
    
    <!-- Install packages if not already installed or if requirements.txt is newer -->
    <ItemGroup>
      <RequirementsFileInfo Include="$(RequirementsFile)" />
      <PackagesManifestInfo Include="$(SitePackagesPath)\python_inline_packages.txt" Condition="Exists('$(SitePackagesPath)\python_inline_packages.txt')" />
    </ItemGroup>
    
    <PropertyGroup>
      <RequirementsLastWrite>%(RequirementsFileInfo.ModifiedTime)</RequirementsLastWrite>
      <ManifestLastWrite Condition="@(PackagesManifestInfo) != ''">%(PackagesManifestInfo.ModifiedTime)</ManifestLastWrite>
      <ManifestLastWrite Condition="@(PackagesManifestInfo) == ''">1900-01-01 00:00:00</ManifestLastWrite>
      <ShouldInstallPackages Condition="'$(PackagesInstalled)' == 'false' OR '$(RequirementsLastWrite)' &gt; '$(ManifestLastWrite)'">true</ShouldInstallPackages>
    </PropertyGroup>
    
    <Message Text="Packages already up to date, skipping installation." Importance="normal" Condition="'$(ShouldInstallPackages)' != 'true'" />
    
    <Exec Command="powershell.exe -ExecutionPolicy Bypass -File &quot;$(PackageInstallScript)&quot; -RequirementsFile &quot;$(RequirementsFile)&quot; -SitePackagesPath &quot;$(SitePackagesPath)&quot;" 
          Condition="'$(ShouldInstallPackages)' == 'true'"
          ContinueOnError="false" 
          WorkingDirectory="$(ProjectDir)" />
    
    <Message Text="External packages installation completed." Importance="high" Condition="'$(ShouldInstallPackages)' == 'true'" />
  </Target>
  
  <!-- Copy site-packages to output directory -->
  <Target Name="CopySitePackages" AfterTargets="Build" Condition="Exists('..\packaging\site-packages')">
    <Message Text="Copying bundled packages to output directory..." Importance="high" />
    <ItemGroup>
      <SitePackageFiles Include="..\packaging\site-packages\**\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(SitePackageFiles)" 
          DestinationFiles="@(SitePackageFiles->'$(OutDir)site-packages\%(RecursiveDir)%(Filename)%(Extension)')" 
          SkipUnchangedFiles="true" />
    <Message Text="Site-packages copied to: $(OutDir)site-packages\" Importance="high" />
  </Target>
  
  <Target Name="_TriggerPostRegen" AfterTargets="Build" DependsOnTargets="PostBuildRegen" />
  <Target Name="GeneratePyBuildDirTxt" AfterTargets="Link">
    <Message Text="Generating $(OutDir)pybuilddir.txt" />
    <WriteLinesToFile File="$(OutDir)pybuilddir.txt" Lines="%0D%0A" Overwrite="true" />
  </Target>
  <Target Name="ValidateUcrtbase" AfterTargets="AfterBuild" Condition="$(Configuration) != 'PGInstrument' and $(Platform) != 'ARM' and $(Platform) != 'ARM64'">
    <PropertyGroup>
      <UcrtName>ucrtbase</UcrtName>
      <UcrtName Condition="'$(Configuration)' == 'Debug'">ucrtbased</UcrtName>
    </PropertyGroup>
    <Exec Command='setlocal
set PYTHONPATH=$(PySourcePath)Lib
"$(OutDir)$(PyExeName)$(PyDebugExt).exe" "$(PySourcePath)PC\validate_ucrtbase.py" $(UcrtName)' ContinueOnError="true" />
  </Target>
  <Target Name="GeneratePythonInlineBat" AfterTargets="AfterBuild">
    <PropertyGroup>
      <_Content>@rem This script invokes the most recently built Python Inline with all arguments
@rem passed through to the interpreter.  This file is generated by the
@rem build process and any changes *will* be thrown away by the next
@rem rebuild.
@rem This is only meant as a convenience for developing CPython
@rem and using it outside of that context is ill-advised.
@echo Running $(Configuration)^|$(Platform) Python Inline interpreter...
@setlocal
@set PYTHONHOME=$(PySourcePath)
@"$(OutDir)python_inline$(PyDebugExt).exe" %*
</_Content>
      <_ExistingContent Condition="Exists('$(PySourcePath)python_inline.bat')">$([System.IO.File]::ReadAllText('$(PySourcePath)python_inline.bat'))</_ExistingContent>
    </PropertyGroup>
    <WriteLinesToFile File="$(PySourcePath)python_inline.bat" Lines="$(_Content)" Overwrite="true" Condition="'$(_Content)' != '$(_ExistingContent)'" />
  </Target>
  <Target Name="CopyPGORT" AfterTargets="Link" Condition="$(Configuration) == 'PGInstrument'">
    <ItemGroup>
      <_PGORT Include="$(VCToolsInstallDir)bin\Hostx86\x86\pgort140.dll" Condition="$(Platform) == 'Win32'" />
      <_PGORT Include="$(VCToolsInstallDir)bin\Hostx64\x64\pgort140.dll" Condition="$(Platform) == 'x64'" />
      <_PGORT Include="$(VCToolsInstallDir)bin\arm64\pgort140.dll" Condition="$(Platform) == 'ARM64'" />
    </ItemGroup>
    <Warning Text="Unable to locate pgort140.dll for $(Platform)." Condition="@(_PGORT) == '' or !Exists(@(_PGORT))" />
    <Copy SourceFiles="@(_PGORT)" DestinationFolder="$(OutDir)">
      <Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
    </Copy>
  </Target>
</Project>