:mod:`!uuid` --- UUID objects according to :rfc:`4122`
======================================================

.. module:: uuid
   :synopsis: UUID objects (universally unique identifiers) according to RFC 4122
.. moduleauthor:: Ka-Ping Yee <ping@zesty.ca>
.. sectionauthor:: George Yoshida <quiver@users.sourceforge.net>

**Source code:** :source:`Lib/uuid.py`

--------------

This module provides immutable :class:`UUID` objects (the :class:`UUID` class)
and the functions :func:`uuid1`, :func:`uuid3`, :func:`uuid4`, :func:`uuid5` for
generating version 1, 3, 4, and 5 UUIDs as specified in :rfc:`4122`.

If all you want is a unique ID, you should probably call :func:`uuid1` or
:func:`uuid4`.  Note that :func:`uuid1` may compromise privacy since it creates
a UUID containing the computer's network address.  :func:`uuid4` creates a
random UUID.

Depending on support from the underlying platform, :func:`uuid1` may or may
not return a "safe" UUID.  A safe UUID is one which is generated using
synchronization methods that ensure no two processes can obtain the same
UUID.  All instances of :class:`UUID` have an :attr:`~UUID.is_safe` attribute
which relays any information about the UUID's safety, using this enumeration:

.. class:: SafeUUID

   .. versionadded:: 3.7

   .. attribute:: SafeUUID.safe

      The UUID was generated by the platform in a multiprocessing-safe way.

   .. attribute:: SafeUUID.unsafe

      The UUID was not generated in a multiprocessing-safe way.

   .. attribute:: SafeUUID.unknown

      The platform does not provide information on whether the UUID was
      generated safely or not.

.. class:: UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None, *, is_safe=SafeUUID.unknown)

   Create a UUID from either a string of 32 hexadecimal digits, a string of 16
   bytes in big-endian order as the *bytes* argument, a string of 16 bytes in
   little-endian order as the *bytes_le* argument, a tuple of six integers
   (32-bit *time_low*, 16-bit *time_mid*, 16-bit *time_hi_version*,
   8-bit *clock_seq_hi_variant*, 8-bit *clock_seq_low*, 48-bit *node*) as the
   *fields* argument, or a single 128-bit integer as the *int* argument.
   When a string of hex digits is given, curly braces, hyphens,
   and a URN prefix are all optional.  For example, these
   expressions all yield the same UUID::

      UUID('{12345678-1234-5678-1234-567812345678}')
      UUID('12345678123456781234567812345678')
      UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
      UUID(bytes=b'\x12\x34\x56\x78'*4)
      UUID(bytes_le=b'\x78\x56\x34\x12\x34\x12\x78\x56' +
                    b'\x12\x34\x56\x78\x12\x34\x56\x78')
      UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
      UUID(int=0x12345678123456781234567812345678)

   Exactly one of *hex*, *bytes*, *bytes_le*, *fields*, or *int* must be given.
   The *version* argument is optional; if given, the resulting UUID will have its
   variant and version number set according to :rfc:`4122`, overriding bits in the
   given *hex*, *bytes*, *bytes_le*, *fields*, or *int*.

   Comparison of UUID objects are made by way of comparing their
   :attr:`UUID.int` attributes.  Comparison with a non-UUID object
   raises a :exc:`TypeError`.

   ``str(uuid)`` returns a string in the form
   ``12345678-1234-5678-1234-567812345678`` where the 32 hexadecimal digits
   represent the UUID.

:class:`UUID` instances have these read-only attributes:

.. attribute:: UUID.bytes

   The UUID as a 16-byte string (containing the six integer fields in big-endian
   byte order).


.. attribute:: UUID.bytes_le

   The UUID as a 16-byte string (with *time_low*, *time_mid*, and *time_hi_version*
   in little-endian byte order).


.. attribute:: UUID.fields

   A tuple of the six integer fields of the UUID, which are also available as six
   individual attributes and two derived attributes:

.. list-table::

   * - Field
     - Meaning

   * - .. attribute:: UUID.time_low
     - The first 32 bits of the UUID.

   * - .. attribute:: UUID.time_mid
     - The next 16 bits of the UUID.

   * - .. attribute:: UUID.time_hi_version
     - The next 16 bits of the UUID.

   * - .. attribute:: UUID.clock_seq_hi_variant
     - The next 8 bits of the UUID.

   * - .. attribute:: UUID.clock_seq_low
     - The next 8 bits of the UUID.

   * - .. attribute:: UUID.node
     - The last 48 bits of the UUID.

   * - .. attribute:: UUID.time
     - The 60-bit timestamp.

   * - .. attribute:: UUID.clock_seq
     - The 14-bit sequence number.


.. attribute:: UUID.hex

   The UUID as a 32-character lowercase hexadecimal string.


.. attribute:: UUID.int

   The UUID as a 128-bit integer.


.. attribute:: UUID.urn

   The UUID as a URN as specified in :rfc:`4122`.


.. attribute:: UUID.variant

   The UUID variant, which determines the internal layout of the UUID. This will be
   one of the constants :const:`RESERVED_NCS`, :const:`RFC_4122`,
   :const:`RESERVED_MICROSOFT`, or :const:`RESERVED_FUTURE`.


.. attribute:: UUID.version

   The UUID version number (1 through 5, meaningful only when the variant is
   :const:`RFC_4122`).

.. attribute:: UUID.is_safe

   An enumeration of :class:`SafeUUID` which indicates whether the platform
   generated the UUID in a multiprocessing-safe way.

   .. versionadded:: 3.7

The :mod:`uuid` module defines the following functions:


.. function:: getnode()

   Get the hardware address as a 48-bit positive integer.  The first time this
   runs, it may launch a separate program, which could be quite slow.  If all
   attempts to obtain the hardware address fail, we choose a random 48-bit
   number with the multicast bit (least significant bit of the first octet)
   set to 1 as recommended in :rfc:`4122`.  "Hardware address" means the MAC
   address of a network interface.  On a machine with multiple network
   interfaces, universally administered MAC addresses (i.e. where the second
   least significant bit of the first octet is *unset*) will be preferred over
   locally administered MAC addresses, but with no other ordering guarantees.

   .. versionchanged:: 3.7
      Universally administered MAC addresses are preferred over locally
      administered MAC addresses, since the former are guaranteed to be
      globally unique, while the latter are not.


.. function:: uuid1(node=None, clock_seq=None)

   Generate a UUID from a host ID, sequence number, and the current time. If *node*
   is not given, :func:`getnode` is used to obtain the hardware address. If
   *clock_seq* is given, it is used as the sequence number; otherwise a random
   14-bit sequence number is chosen.


.. function:: uuid3(namespace, name)

   Generate a UUID based on the MD5 hash of a namespace identifier (which is a
   UUID) and a name (which is a :class:`bytes` object or a string
   that will be encoded using UTF-8).


.. function:: uuid4()

   Generate a random UUID.


.. function:: uuid5(namespace, name)

   Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a
   UUID) and a name (which is a :class:`bytes` object or a string
   that will be encoded using UTF-8).


The :mod:`uuid` module defines the following namespace identifiers for use with
:func:`uuid3` or :func:`uuid5`.


.. data:: NAMESPACE_DNS

   When this namespace is specified, the *name* string is a fully qualified domain
   name.


.. data:: NAMESPACE_URL

   When this namespace is specified, the *name* string is a URL.


.. data:: NAMESPACE_OID

   When this namespace is specified, the *name* string is an ISO OID.


.. data:: NAMESPACE_X500

   When this namespace is specified, the *name* string is an X.500 DN in DER or a
   text output format.

The :mod:`uuid` module defines the following constants for the possible values
of the :attr:`~UUID.variant` attribute:


.. data:: RESERVED_NCS

   Reserved for NCS compatibility.


.. data:: RFC_4122

   Specifies the UUID layout given in :rfc:`4122`.


.. data:: RESERVED_MICROSOFT

   Reserved for Microsoft compatibility.


.. data:: RESERVED_FUTURE

   Reserved for future definition.


.. seealso::

   :rfc:`4122` - A Universally Unique IDentifier (UUID) URN Namespace
      This specification defines a Uniform Resource Name namespace for UUIDs, the
      internal format of UUIDs, and methods of generating UUIDs.


.. _uuid-cli:

Command-Line Usage
------------------

.. versionadded:: 3.12

The :mod:`uuid` module can be executed as a script from the command line.

.. code-block:: sh

   python -m uuid [-h] [-u {uuid1,uuid3,uuid4,uuid5}] [-n NAMESPACE] [-N NAME]

The following options are accepted:

.. program:: uuid

.. option:: -h, --help

   Show the help message and exit.

.. option:: -u <uuid>
            --uuid <uuid>

   Specify the function name to use to generate the uuid. By default :func:`uuid4`
   is used.

.. option:: -n <namespace>
            --namespace <namespace>

   The namespace is a ``UUID``, or ``@ns`` where ``ns`` is a well-known predefined UUID
   addressed by namespace name. Such as ``@dns``, ``@url``, ``@oid``, and ``@x500``.
   Only required for :func:`uuid3` / :func:`uuid5` functions.

.. option:: -N <name>
            --name <name>

   The name used as part of generating the uuid. Only required for
   :func:`uuid3` / :func:`uuid5` functions.


.. _uuid-example:

Example
-------

Here are some examples of typical usage of the :mod:`uuid` module::

   >>> import uuid

   >>> # make a UUID based on the host ID and current time
   >>> uuid.uuid1()
   UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

   >>> # make a UUID using an MD5 hash of a namespace UUID and a name
   >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
   UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

   >>> # make a random UUID
   >>> uuid.uuid4()
   UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

   >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
   >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
   UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

   >>> # make a UUID from a string of hex digits (braces and hyphens ignored)
   >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

   >>> # convert a UUID to a string of hex digits in standard form
   >>> str(x)
   '00010203-0405-0607-0809-0a0b0c0d0e0f'

   >>> # get the raw 16 bytes of the UUID
   >>> x.bytes
   b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'

   >>> # make a UUID from a 16-byte string
   >>> uuid.UUID(bytes=x.bytes)
   UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')


.. _uuid-cli-example:

Command-Line Example
--------------------

Here are some examples of typical usage of the :mod:`uuid` command line interface:

.. code-block:: shell

   # generate a random uuid - by default uuid4() is used
   $ python -m uuid

   # generate a uuid using uuid1()
   $ python -m uuid -u uuid1

   # generate a uuid using uuid5
   $ python -m uuid -u uuid5 -n @url -N example.com

