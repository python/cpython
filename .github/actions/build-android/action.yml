# This is coded as an action rather than a workflow so the release-tools
# repository can load it from a dynamically-chosen commit. Cross-repository
# workflow calls must have a Git reference hard-coded in the calling workflow,
# but actions can be run dynamically from the runner's filesystem.

name: Build and test (Android)
description: Build and test (Android)

inputs:
  triplet:
    description: Host triplet
    required: true

runs:
  using: composite

  steps:
    # Build Python, and package it into a release artifact.
    - shell: bash
      run: ./Android/android.py build ${{ inputs.triplet }}
    - shell: bash
      run: ./Android/android.py package ${{ inputs.triplet }}
    - uses: actions/upload-artifact@v4
      with:
        name: android
        path: cross-build/${{ inputs.triplet }}/dist/*
        if-no-files-found: error

    # Currently, GitHub Actions can only run the Android emulator on Linux, so
    # all the remaining steps are conditional on that.

    # (https://github.blog/changelog/2024-04-02-github-actions-hardware-accelerated-android-virtualization-now-available/).
    - name: Enable KVM for Android emulator
      if: runner.os == "Linux"
      shell: bash
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' \
          | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Unpack release artifact
      if: runner.os == "Linux"
      shell: bash
      run: |
        mkdir $RUNNER_TEMP/android
        tar -C $RUNNER_TEMP/android -xf cross-build/${{ inputs.triplet }}/dist/*

    - name: Tests
      if: runner.os == "Linux"
      shell: bash
      run: |
        $RUNNER_TEMP/android/android.py test --managed maxVersion -v -- \
          -uall --single-process --rerun -W
