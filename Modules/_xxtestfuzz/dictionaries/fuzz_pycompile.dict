# bits of syntax
"( "
") "
"[ "
"] "
": "
", "
"; "
"{ "
"} "

# operators
"+ "
"- "
"* "
"** "
"/ "
"// "
"| "
"& "
"< "
"> "
"= "
". "
"% "
"` "
"^ "
"~ "
"@ "
"== "
"!= "
"<> "
"<< "
"<= "
">= "
">> "
"+= "
"-= "
"*= "
"** "
"/= "
"//= "
"|= "
"%= "
"&= "
"^= "
"<<= "
">>= "
"**= "
":= "
"@= "

# whitespace
"  "
":\\n  "

# type signatures and functions
"-> "
": List[int]"
": Dict[int, str]"

"# type:"
"# type: List[int]"
"# type: Dict[int, str]"

", *"
", /"
", *args"
", **kwargs"
", x=42"


# literals
"0x0a"
"0b0000"
"42"
"0o70"
"42j"
"42.01"
"-5"
"+42e-3"
"0_0_0"
"1e1_0"
".1_4"

"{}"

# variable names
"x"
"y"

# strings
"r'x'"

"b'x'"

"rb\"x\""

"br\"x\""

"f'{x + 5}'"
"f\"{x + 5}\""

"'''"
"\"\"\""

"\\u"
"\\x"

# keywords
"def "
"del "
"pass "
"break "
"continue "
"return "
"raise "
"from "
"import "
".. "
"... "
"__future__ "
"as "
"global "
"nonlocal "
"assert "
"print "
"if "
"elif "
"else: "
"while "
"try: "
"except "
"finally: "
"with "
"lambda "
"or "
"and "
"not "
"None "
"__peg_parser__"
"True "
"False "
"yield "
"async "
"await "
"for "
"in "
"is "
"class "

# shebangs and encodings
"#!"
"# coding:"
"# coding="
"# coding: latin-1"
"# coding=latin-1"
"# coding: utf-8"
"# coding=utf-8"
"# coding: ascii"
"# coding=ascii"
"# coding: cp860"
"# coding=cp860"
"# coding: gbk"
"# coding=gbk"
